A decorator adds a new functionality to a function. It allows us to change the behaviour of a function without changing any of its code.

You can also decorate your function with more than one decorator.

By default, a decorator function is a nested_function.

Example of a decorator function:

def the_decorator(function):
    def wrapper_function():
        print('This is a decoration')
        function()
        print('I've just executed the function and I'm decorating\                again')

    return wrapper_function
